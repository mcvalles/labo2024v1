ncol(dataset)
dtrain <- dataset[foto_mes == 202107] # defino donde voy a entrenar
dapply <- dataset[foto_mes == 202109] # defino donde voy a aplicar el modelo
# genero el modelo,  aqui se construye el arbol
# quiero predecir clase_ternaria a partir de el resto de las variables
modelo <- rpart(
formula = "clase_ternaria ~ .",
data = dtrain, # los datos donde voy a entrenar
xval = 0,
cp = -0.5, # Original -0.3 esto significa no limitar la complejidad de los splits
minsplit = 500, # Original 0 - minima cantidad de registros para que se haga el split
minbucket = 160, # Original 1 - tama単o minimo de una hoja
maxdepth = 6 # Original 3
) # profundidad maxima del arbol
# aplico el modelo a los datos nuevos
prediccion <- predict(
object = modelo,
newdata = dapply,
type = "prob"
#type = "class"
)
prob_baja2 = as.data.table(prediccion)
prob_baja2 <- prob_baja2[prob_baja2$`BAJA+2` > 1/40]
# agrego a dapply una columna nueva que es la probabilidad de BAJA+2
dapply[, prob_baja2 := prediccion[, "BAJA+2"]]
accuracy(dapply$prob_baja2, prediccion)
dapply[, Predicted := as.numeric(prob_baja2 > 0.020)]
# genero el archivo para Kaggle
# primero creo la carpeta donde va el experimento
dir.create("./exp/")
dir.create("./exp/KA2001")
kaggle = dapply[, list(numero_de_cliente, Predicted)]
nrow(kaggle)
bajas2 = kaggle %>% filter(Predicted == 1)
nrow(bajas2)
# solo los campos para Kaggle
fwrite(dapply[, list(numero_de_cliente, Predicted)],
file = "./exp/KA2001/K101_001.csv",
sep = ","
)
dapply[, Predicted := as.numeric(prob_baja2 > 0.022)]
# genero el archivo para Kaggle
# primero creo la carpeta donde va el experimento
dir.create("./exp/")
dir.create("./exp/KA2001")
kaggle = dapply[, list(numero_de_cliente, Predicted)]
nrow(kaggle)
bajas2 = kaggle %>% filter(Predicted == 1)
nrow(bajas2)
dapply[, Predicted := as.numeric(prob_baja2 > 0.021)]
# genero el archivo para Kaggle
# primero creo la carpeta donde va el experimento
dir.create("./exp/")
dir.create("./exp/KA2001")
kaggle = dapply[, list(numero_de_cliente, Predicted)]
nrow(kaggle)
bajas2 = kaggle %>% filter(Predicted == 1)
nrow(bajas2)
# solo los campos para Kaggle
fwrite(dapply[, list(numero_de_cliente, Predicted)],
file = "./exp/KA2001/K101_001.csv",
sep = ","
)
dapply[, Predicted := as.numeric(prob_baja2 > 0.0205)]
# genero el archivo para Kaggle
# primero creo la carpeta donde va el experimento
dir.create("./exp/")
dir.create("./exp/KA2001")
kaggle = dapply[, list(numero_de_cliente, Predicted)]
nrow(kaggle)
bajas2 = kaggle %>% filter(Predicted == 1)
nrow(bajas2)
dapply[, Predicted := as.numeric(prob_baja2 > 0.0202)]
# genero el archivo para Kaggle
# primero creo la carpeta donde va el experimento
dir.create("./exp/")
dir.create("./exp/KA2001")
kaggle = dapply[, list(numero_de_cliente, Predicted)]
nrow(kaggle)
bajas2 = kaggle %>% filter(Predicted == 1)
nrow(bajas2)
dapply[, Predicted := as.numeric(prob_baja2 > 0.0206)]
# genero el archivo para Kaggle
# primero creo la carpeta donde va el experimento
dir.create("./exp/")
dir.create("./exp/KA2001")
kaggle = dapply[, list(numero_de_cliente, Predicted)]
nrow(kaggle)
bajas2 = kaggle %>% filter(Predicted == 1)
nrow(bajas2)
dapply[, Predicted := as.numeric(prob_baja2 > 0.0205)]
# genero el archivo para Kaggle
# primero creo la carpeta donde va el experimento
dir.create("./exp/")
dir.create("./exp/KA2001")
kaggle = dapply[, list(numero_de_cliente, Predicted)]
nrow(kaggle)
bajas2 = kaggle %>% filter(Predicted == 1)
nrow(bajas2)
dapply[, Predicted := as.numeric(prob_baja2 > 0.0204)]
# genero el archivo para Kaggle
# primero creo la carpeta donde va el experimento
dir.create("./exp/")
dir.create("./exp/KA2001")
kaggle = dapply[, list(numero_de_cliente, Predicted)]
nrow(kaggle)
bajas2 = kaggle %>% filter(Predicted == 1)
nrow(bajas2)
dapply[, Predicted := as.numeric(prob_baja2 > 0.0203)]
# genero el archivo para Kaggle
# primero creo la carpeta donde va el experimento
dir.create("./exp/")
dir.create("./exp/KA2001")
kaggle = dapply[, list(numero_de_cliente, Predicted)]
nrow(kaggle)
bajas2 = kaggle %>% filter(Predicted == 1)
nrow(bajas2)
dapply[, Predicted := as.numeric(prob_baja2 > 0.0202)]
# genero el archivo para Kaggle
# primero creo la carpeta donde va el experimento
dir.create("./exp/")
dir.create("./exp/KA2001")
kaggle = dapply[, list(numero_de_cliente, Predicted)]
nrow(kaggle)
bajas2 = kaggle %>% filter(Predicted == 1)
nrow(bajas2)
dapply[, Predicted := as.numeric(prob_baja2 > 0.0203)]
# genero el archivo para Kaggle
# primero creo la carpeta donde va el experimento
dir.create("./exp/")
dir.create("./exp/KA2001")
kaggle = dapply[, list(numero_de_cliente, Predicted)]
nrow(kaggle)
bajas2 = kaggle %>% filter(Predicted == 1)
nrow(bajas2)
dapply[, Predicted := as.numeric(prob_baja2 > 0.022)]
# genero el archivo para Kaggle
# primero creo la carpeta donde va el experimento
dir.create("./exp/")
dir.create("./exp/KA2001")
kaggle = dapply[, list(numero_de_cliente, Predicted)]
nrow(kaggle)
bajas2 = kaggle %>% filter(Predicted == 1)
nrow(bajas2)
dapply[, Predicted := as.numeric(prob_baja2 > 0.019)]
# genero el archivo para Kaggle
# primero creo la carpeta donde va el experimento
dir.create("./exp/")
dir.create("./exp/KA2001")
kaggle = dapply[, list(numero_de_cliente, Predicted)]
nrow(kaggle)
bajas2 = kaggle %>% filter(Predicted == 1)
nrow(bajas2)
# solo los campos para Kaggle
fwrite(dapply[, list(numero_de_cliente, Predicted)],
file = "./exp/KA2001/K101_001.csv",
sep = ","
)
# genero el modelo,  aqui se construye el arbol
# quiero predecir clase_ternaria a partir de el resto de las variables
modelo <- rpart(
formula = "clase_ternaria ~ .",
data = dtrain, # los datos donde voy a entrenar
xval = 0,
cp = -0.5, # Original -0.3 esto significa no limitar la complejidad de los splits
minsplit = 500, # Original 0 - minima cantidad de registros para que se haga el split
minbucket = 160, # Original 1 - tama単o minimo de una hoja
maxdepth = 8 # Original 3
) # profundidad maxima del arbol
# aplico el modelo a los datos nuevos
prediccion <- predict(
object = modelo,
newdata = dapply,
type = "prob"
#type = "class"
)
# agrego a dapply una columna nueva que es la probabilidad de BAJA+2
dapply[, prob_baja2 := prediccion[, "BAJA+2"]]
accuracy(dapply$prob_baja2, prediccion)
dapply[, Predicted := as.numeric(prob_baja2 > 0.028)]
# genero el archivo para Kaggle
# primero creo la carpeta donde va el experimento
dir.create("./exp/")
dir.create("./exp/KA2001")
kaggle = dapply[, list(numero_de_cliente, Predicted)]
nrow(kaggle)
bajas2 = kaggle %>% filter(Predicted == 1)
nrow(bajas2)
dapply[, Predicted := as.numeric(prob_baja2 > 0.027)]
# genero el archivo para Kaggle
# primero creo la carpeta donde va el experimento
dir.create("./exp/")
dir.create("./exp/KA2001")
kaggle = dapply[, list(numero_de_cliente, Predicted)]
nrow(kaggle)
bajas2 = kaggle %>% filter(Predicted == 1)
nrow(bajas2)
dapply[, Predicted := as.numeric(prob_baja2 > 0.020)]
# genero el archivo para Kaggle
# primero creo la carpeta donde va el experimento
dir.create("./exp/")
dir.create("./exp/KA2001")
kaggle = dapply[, list(numero_de_cliente, Predicted)]
nrow(kaggle)
bajas2 = kaggle %>% filter(Predicted == 1)
nrow(bajas2)
dapply[, Predicted := as.numeric(prob_baja2 > 0.022)]
# genero el archivo para Kaggle
# primero creo la carpeta donde va el experimento
dir.create("./exp/")
dir.create("./exp/KA2001")
kaggle = dapply[, list(numero_de_cliente, Predicted)]
nrow(kaggle)
bajas2 = kaggle %>% filter(Predicted == 1)
nrow(bajas2)
# solo los campos para Kaggle
fwrite(dapply[, list(numero_de_cliente, Predicted)],
file = "./exp/KA2001/K101_001.csv",
sep = ","
)
dtrain <- dataset[foto_mes == 202107] # defino donde voy a entrenar
dapply <- dataset[foto_mes == 202109] # defino donde voy a aplicar el modelo
# genero el modelo,  aqui se construye el arbol
# quiero predecir clase_ternaria a partir de el resto de las variables
modelo <- rpart(
formula = "clase_ternaria ~ .",
data = dtrain, # los datos donde voy a entrenar
xval = 0,
cp = -0.5, # Original -0.3 esto significa no limitar la complejidad de los splits
minsplit = 600, # Original 0 - minima cantidad de registros para que se haga el split
minbucket = 300, # Original 1 - tama単o minimo de una hoja
maxdepth = 8 # Original 3
) # profundidad maxima del arbol
# aplico el modelo a los datos nuevos
prediccion <- predict(
object = modelo,
newdata = dapply,
type = "prob"
#type = "class"
)
# agrego a dapply una columna nueva que es la probabilidad de BAJA+2
dapply[, prob_baja2 := prediccion[, "BAJA+2"]]
accuracy(dapply$prob_baja2, prediccion)
dapply[, Predicted := as.numeric(prob_baja2 > 0.022)]
# genero el archivo para Kaggle
# primero creo la carpeta donde va el experimento
dir.create("./exp/")
dir.create("./exp/KA2001")
kaggle = dapply[, list(numero_de_cliente, Predicted)]
nrow(kaggle)
bajas2 = kaggle %>% filter(Predicted == 1)
nrow(bajas2)
# solo los campos para Kaggle
fwrite(dapply[, list(numero_de_cliente, Predicted)],
file = "./exp/KA2001/K101_001.csv",
sep = ","
)
dtrain <- dataset[foto_mes == 202107] # defino donde voy a entrenar
dapply <- dataset[foto_mes == 202109] # defino donde voy a aplicar el modelo
# genero el modelo,  aqui se construye el arbol
# quiero predecir clase_ternaria a partir de el resto de las variables
modelo <- rpart(
formula = "clase_ternaria ~ .",
data = dtrain, # los datos donde voy a entrenar
xval = 0,
cp = -0.25, # Original -0.3 esto significa no limitar la complejidad de los splits
minsplit = 400, # Original 0 - minima cantidad de registros para que se haga el split
minbucket = 200, # Original 1 - tama単o minimo de una hoja
maxdepth = 14 # Original 3
) # profundidad maxima del arbol
# aplico el modelo a los datos nuevos
prediccion <- predict(
object = modelo,
newdata = dapply,
type = "prob"
#type = "class"
)
# agrego a dapply una columna nueva que es la probabilidad de BAJA+2
dapply[, prob_baja2 := prediccion[, "BAJA+2"]]
accuracy(dapply$prob_baja2, prediccion)
dapply[, Predicted := as.numeric(prob_baja2 > 1/40)]
# genero el archivo para Kaggle
# primero creo la carpeta donde va el experimento
dir.create("./exp/")
dir.create("./exp/KA2001")
kaggle = dapply[, list(numero_de_cliente, Predicted)]
nrow(kaggle)
bajas2 = kaggle %>% filter(Predicted == 1)
nrow(bajas2)
# solo los campos para Kaggle
fwrite(dapply[, list(numero_de_cliente, Predicted)],
file = "./exp/KA2001/K101_001.csv",
sep = ","
)
# genero el modelo,  aqui se construye el arbol
# quiero predecir clase_ternaria a partir de el resto de las variables
modelo <- rpart(
formula = "clase_ternaria ~ .",
data = dtrain, # los datos donde voy a entrenar
xval = 0,
cp = -1, # Original -0.3 esto significa no limitar la complejidad de los splits
minsplit = 1000, # Original 0 - minima cantidad de registros para que se haga el split
minbucket = 500, # Original 1 - tama単o minimo de una hoja
maxdepth = 14 # Original 3
) # profundidad maxima del arbol
# aplico el modelo a los datos nuevos
prediccion <- predict(
object = modelo,
newdata = dapply,
type = "prob"
#type = "class"
)
# agrego a dapply una columna nueva que es la probabilidad de BAJA+2
dapply[, prob_baja2 := prediccion[, "BAJA+2"]]
accuracy(dapply$prob_baja2, prediccion)
dapply[, Predicted := as.numeric(prob_baja2 > 1/40)]
# genero el archivo para Kaggle
# primero creo la carpeta donde va el experimento
dir.create("./exp/")
dir.create("./exp/KA2001")
kaggle = dapply[, list(numero_de_cliente, Predicted)]
nrow(kaggle)
bajas2 = kaggle %>% filter(Predicted == 1)
nrow(bajas2)
# solo los campos para Kaggle
fwrite(dapply[, list(numero_de_cliente, Predicted)],
file = "./exp/KA2001/K101_001.csv",
sep = ","
)
# genero el modelo,  aqui se construye el arbol
# quiero predecir clase_ternaria a partir de el resto de las variables
modelo <- rpart(
formula = "clase_ternaria ~ .",
data = dtrain, # los datos donde voy a entrenar
xval = 0,
cp = -0.75, # Original -0.3 esto significa no limitar la complejidad de los splits
minsplit = 1000, # Original 0 - minima cantidad de registros para que se haga el split
minbucket = 500, # Original 1 - tama単o minimo de una hoja
maxdepth = 6 # Original 3
) # profundidad maxima del arbol
# aplico el modelo a los datos nuevos
prediccion <- predict(
object = modelo,
newdata = dapply,
type = "prob"
#type = "class"
)
# agrego a dapply una columna nueva que es la probabilidad de BAJA+2
dapply[, prob_baja2 := prediccion[, "BAJA+2"]]
accuracy(dapply$prob_baja2, prediccion)
#__________________________________________________________________
#Optimizacion Hiperparametros _____________________________________
getParamSet("classif.rpart")
dapply[, Predicted := as.numeric(prob_baja2 > 1/40)]
# genero el archivo para Kaggle
# primero creo la carpeta donde va el experimento
dir.create("./exp/")
dir.create("./exp/KA2001")
kaggle = dapply[, list(numero_de_cliente, Predicted)]
nrow(kaggle)
bajas2 = kaggle %>% filter(Predicted == 1)
nrow(bajas2)
# solo los campos para Kaggle
fwrite(dapply[, list(numero_de_cliente, Predicted)],
file = "./exp/KA2001/K101_001.csv",
sep = ","
)
# genero el modelo,  aqui se construye el arbol
# quiero predecir clase_ternaria a partir de el resto de las variables
modelo <- rpart(
formula = "clase_ternaria ~ .",
data = dtrain, # los datos donde voy a entrenar
xval = 0,
cp = -1, # Original -0.3 esto significa no limitar la complejidad de los splits
minsplit = 600, # Original 0 - minima cantidad de registros para que se haga el split
minbucket = 300, # Original 1 - tama単o minimo de una hoja
maxdepth = 6 # Original 3
) # profundidad maxima del arbol
# aplico el modelo a los datos nuevos
prediccion <- predict(
object = modelo,
newdata = dapply,
type = "prob"
#type = "class"
)
# agrego a dapply una columna nueva que es la probabilidad de BAJA+2
dapply[, prob_baja2 := prediccion[, "BAJA+2"]]
accuracy(dapply$prob_baja2, prediccion)
dapply[, Predicted := as.numeric(prob_baja2 > 1/40)]
# genero el archivo para Kaggle
# primero creo la carpeta donde va el experimento
dir.create("./exp/")
dir.create("./exp/KA2001")
kaggle = dapply[, list(numero_de_cliente, Predicted)]
nrow(kaggle)
bajas2 = kaggle %>% filter(Predicted == 1)
nrow(bajas2)
# solo los campos para Kaggle
fwrite(dapply[, list(numero_de_cliente, Predicted)],
file = "./exp/KA2001/K101_001.csv",
sep = ","
)
# genero el modelo,  aqui se construye el arbol
# quiero predecir clase_ternaria a partir de el resto de las variables
modelo <- rpart(
formula = "clase_ternaria ~ .",
data = dtrain, # los datos donde voy a entrenar
xval = 0,
cp = -1, # Original -0.3 esto significa no limitar la complejidad de los splits
minsplit = 600, # Original 0 - minima cantidad de registros para que se haga el split
minbucket = 300, # Original 1 - tama単o minimo de una hoja
maxdepth = 8 # Original 3
) # profundidad maxima del arbol
# aplico el modelo a los datos nuevos
prediccion <- predict(
object = modelo,
newdata = dapply,
type = "prob"
#type = "class"
)
# agrego a dapply una columna nueva que es la probabilidad de BAJA+2
dapply[, prob_baja2 := prediccion[, "BAJA+2"]]
accuracy(dapply$prob_baja2, prediccion)
dapply[, Predicted := as.numeric(prob_baja2 > 1/40)]
# genero el archivo para Kaggle
# primero creo la carpeta donde va el experimento
dir.create("./exp/")
dir.create("./exp/KA2001")
kaggle = dapply[, list(numero_de_cliente, Predicted)]
nrow(kaggle)
bajas2 = kaggle %>% filter(Predicted == 1)
nrow(bajas2)
# solo los campos para Kaggle
fwrite(dapply[, list(numero_de_cliente, Predicted)],
file = "./exp/KA2001/K101_001.csv",
sep = ","
)
# genero el modelo,  aqui se construye el arbol
# quiero predecir clase_ternaria a partir de el resto de las variables
modelo <- rpart(
formula = "clase_ternaria ~ .",
data = dtrain, # los datos donde voy a entrenar
xval = 0,
cp = -0.75, # Original -0.3 esto significa no limitar la complejidad de los splits
minsplit = 600, # Original 0 - minima cantidad de registros para que se haga el split
minbucket = 300, # Original 1 - tama単o minimo de una hoja
maxdepth = 8 # Original 3
) # profundidad maxima del arbol
# aplico el modelo a los datos nuevos
prediccion <- predict(
object = modelo,
newdata = dapply,
type = "prob"
#type = "class"
)
# agrego a dapply una columna nueva que es la probabilidad de BAJA+2
dapply[, prob_baja2 := prediccion[, "BAJA+2"]]
accuracy(dapply$prob_baja2, prediccion)
dapply[, Predicted := as.numeric(prob_baja2 > 1/40)]
# genero el archivo para Kaggle
# primero creo la carpeta donde va el experimento
dir.create("./exp/")
dir.create("./exp/KA2001")
kaggle = dapply[, list(numero_de_cliente, Predicted)]
nrow(kaggle)
bajas2 = kaggle %>% filter(Predicted == 1)
nrow(bajas2)
# solo los campos para Kaggle
fwrite(dapply[, list(numero_de_cliente, Predicted)],
file = "./exp/KA2001/K101_001.csv",
sep = ","
)
# genero el modelo,  aqui se construye el arbol
# quiero predecir clase_ternaria a partir de el resto de las variables
modelo <- rpart(
formula = "clase_ternaria ~ .",
data = dtrain, # los datos donde voy a entrenar
xval = 0,
cp = -0.5, # Original -0.3 esto significa no limitar la complejidad de los splits
minsplit = 1000, # Original 0 - minima cantidad de registros para que se haga el split
minbucket = 100, # Original 1 - tama単o minimo de una hoja
maxdepth = 6 # Original 3
) # profundidad maxima del arbol
# aplico el modelo a los datos nuevos
prediccion <- predict(
object = modelo,
newdata = dapply,
type = "prob"
#type = "class"
)
# grafico el arbol
prp(modelo,
extra = 101, digits = -5,
branch = 1, type = 4, varlen = 0, faclen = 0
)
# agrego a dapply una columna nueva que es la probabilidad de BAJA+2
dapply[, prob_baja2 := prediccion[, "BAJA+2"]]
accuracy(dapply$prob_baja2, prediccion)
dapply[, Predicted := as.numeric(prob_baja2 > 1/40)]
# genero el archivo para Kaggle
# primero creo la carpeta donde va el experimento
dir.create("./exp/")
dir.create("./exp/KA2001")
kaggle = dapply[, list(numero_de_cliente, Predicted)]
nrow(kaggle)
bajas2 = kaggle %>% filter(Predicted == 1)
nrow(bajas2)
# solo los campos para Kaggle
fwrite(dapply[, list(numero_de_cliente, Predicted)],
file = "./exp/KA2001/K101_001.csv",
sep = ","
)
